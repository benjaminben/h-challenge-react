{"version":3,"sources":["reducers/api.js","reducers/vehicles.js","reducers/index.js","components/VehiclesView.js","containers/Vehicles.js","components/VehicleView.js","containers/Vehicle.js","components/LoaderView.js","containers/Loader.js","actions/api.js","actions/request.js","containers/Stage.js","serviceWorker.js","index.js"],"names":["initialState","middleware","thunk","reducers","combineReducers","api","state","arguments","length","undefined","action","time","Date","type","Object","objectSpread","defineProperty","key","loading","error","body","payload","errors","concat","slice","vehicles","store","createStore","compose","applyMiddleware","apply","VehiclesView","props","react_default","a","createElement","id","htmlFor","name","value","filt","placeholder","onChange","e","updateFilter","target","map","v","i","react_router_dom","to","className","Make","Model","Vehicles","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","window","scroll","_this2","assign","filter","toLowerCase","match","setState","Component","connect","dispatch","VehicleView","vehicle","atts","keys","k","Vehicle","withRouter","ownProps","vid","parseInt","params","LoaderView","Loader","LoaderView_LoaderView","uri","options","args","method","headers","fetch","request","getState","then","r","json","d","catch","console","Stage","fetchVehicles","react_router","exact","path","component","containers_Loader","Promise","resolve","Boolean","location","hostname","log","process","ReactDOM","render","es","basename","containers_Stage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcf422d5.chunk.js","sourcesContent":["const initialState={}\nexport default (state=initialState, action) => {\n  const time = +new Date()\n  switch (action.type) {\n    case 'api:loading':\n      return {\n        ...state,\n        [action.key]: {\n          ...state[action.key],\n          loading: true,\n        }\n      }\n    case 'api:yes':\n      return {\n        ...state,\n        [action.key]: {\n          ...state[action.key],\n          loading: false,\n          error: null,\n          body: action.payload,\n          time,\n        }\n      }\n    case 'api:no':\n      return {\n        ...state,\n        [action.key]: {\n          ...state[action.key],\n          loading: false,\n          body: null,\n          error: action.error,\n          time,\n          errors: [{\n            error: action.error,\n            time,\n          }].concat((state[action.key] || {}).errors || []).slice(0, 2),\n        }\n      }\n    case 'api:destroy':\n      return initialState\n    default:\n      return state\n  }\n}\n","const initialState = []\nexport default function(state=initialState, action) {\n  switch(action.type) {\n    case 'vehicles:all':\n      return action.payload\n    default:\n      return state\n  }\n}\n","import logger from 'redux-logger'\nimport thunk  from 'redux-thunk'\nimport {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose,\n} from 'redux'\n\nimport api      from './api'\nimport vehicles from './vehicles'\n\n// Allow support of actions with asynchronous results in the future\nconst middleware = [thunk]\n\n// In dev, open js console to see all state changes\nif( process.env.NODE_ENV !== 'production' ) {\n  middleware.push(logger)\n}\n\nconst reducers = combineReducers({\n  api,\n  vehicles,\n})\n\nconst store = createStore(\n  reducers,\n  undefined,\n  compose(applyMiddleware(...middleware))\n)\n\nexport default store\n","import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport \"../styles/Vehicles.css\"\n\nexport default (props) => {\n  return (\n    <div id=\"Vehicles\">\n      <form>\n        <label htmlFor=\"filter\">Filter: </label>\n        <input\n          name=\"filter\"\n          type=\"text\"\n          value={props.filt}\n          placeholder=\"make or model...\"\n          onChange={e => props.updateFilter(e.target.value)} />\n      </form>\n      {\n        props.vehicles.map((v,i) => {\n          return(\n            <Link key={i} to={`/${v.id}`} className=\"vehicle\">{`${v.Make} ${v.Model}`}</Link>\n          )\n        })\n      }\n    </div>\n  )\n}\n","import React, {Component} from 'react'\nimport {connect}          from 'react-redux'\nimport VehiclesView       from '../components/VehiclesView'\n\nclass Vehicles extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      filt: \"\"\n    }\n  }\n\n  componentDidMount() { window.scroll(0,0) } // ;)\n\n  render() {\n    return (\n      <VehiclesView\n        {...this.props}\n        {...this.state}\n        vehicles={this.props.vehicles.filter(v => {\n          const title = `${v.Make} ${v.Model}`.toLowerCase()\n          return title.match(this.state.filt.toLowerCase())\n        })}\n        updateFilter={to => this.setState({filt: to})} />\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    vehicles: state.vehicles\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Vehicles)\n","import React  from 'react'\nimport {Link} from 'react-router-dom'\nimport \"../styles/Vehicle.css\"\n\nexport default (props) => {\n  const v = props.vehicle\n  const atts = Object.keys(v).filter(k => k !== \"Make\" && k !== \"Model\" && k !== \"id\")\n  return (\n    <div id=\"Vehicle\">\n      <h1 className=\"title\">{`${v.Make} ${v.Model}`}</h1>\n      { atts.map((a,i) => {\n        return <p key={i}>{`${a}: ${v[a]}`}</p>\n      }) }\n      <h2><Link to=\"/\">Back</Link></h2>\n    </div>\n  )\n}\n","import React, {Component} from 'react'\nimport {connect}          from 'react-redux'\nimport {withRouter}       from 'react-router'\nimport VehicleView        from '../components/VehicleView'\n\nclass Vehicle extends Component {\n  componentDidMount() { window.scroll(0,0) } // :)\n  render() {\n    return (\n      <VehicleView {...this.props} />\n    )\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const vid = parseInt(ownProps.match.params.vid)\n  const vehicle = state.vehicles.filter(v => v.id === vid)[0]\n  return {\n    vehicle\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Vehicle))\n","import React, { Component } from 'react'\n\nexport default class LoaderView extends Component {\n  render() {\n    return (\n      <div id=\"Loader\">\n        Loading...\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\nimport {connect}          from 'react-redux'\nimport LoaderView         from '../components/LoaderView'\n\nclass Loader extends Component {\n  render() {\n    return (\n      <LoaderView {...this.props} />\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loader)\n","const baseUrl = process.env.NODE_ENV === 'production' ?\n  'https://benjaminben.github.io/h-challenge-react' :\n  'http://localhost:3000'\n\nconst api = (uri, options) => {\n  const args = {}\n  if (options) {\n    args.method = options.method || 'GET'\n    args.body = options.body\n    args.headers = options.headers\n  }\n\n  return fetch(`${baseUrl}${uri}`, args)\n}\n\nexport default api\nexport {\n  baseUrl\n}\n","import api from '../actions/api'\n\nconst request = (uri, key, options) => {\n  return function (dispatch, getState) {\n    if (!uri) {return console.error(`request requires uri`)}\n    if (!key) {return console.error(`request requires store key`)}\n    dispatch({type: 'api:loading', key})\n\n    return api(uri, options).then(r => {\n      return r.json()\n    }).then(d => {\n      dispatch({type: 'api:yes', key, payload: d})\n      return d\n    }).catch((e) => {\n      dispatch({type: 'api:no', key, error: e})\n      throw e\n    })\n  }\n}\n\nexport default request\n","import React, {Component} from 'react'\nimport {Switch, Route}    from 'react-router-dom'\nimport {connect}          from 'react-redux'\nimport Vehicles           from '../containers/Vehicles'\nimport Vehicle            from '../containers/Vehicle'\nimport Loader             from '../containers/Loader'\nimport request            from '../actions/request'\n\nclass Stage extends Component {\n  componentDidMount() {\n    this.props.fetchVehicles()\n  }\n\n  render() {\n    const {props} = this\n    return (\n      props.vehicles.length\n      ? <Switch>\n          <Route exact path=\"/\" component={Vehicles} />\n          <Route path=\"/:vid\" component={Vehicle} />\n        </Switch>\n      : <Loader />\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    vehicles: state.vehicles,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchVehicles: () => {\n      Promise.resolve().then(() => {\n        return dispatch(request(\"/vehicles.json\", \"vehicles\"))\n      }).then(payload => {\n        dispatch({type: \"vehicles:all\", payload})\n      })\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stage)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport store from './reducers'\nimport './index.css'\nimport Stage from './containers/Stage'\nimport * as serviceWorker from './serviceWorker'\n\nconsole.log(process.env.PUBLIC_URL)\n\nconst Root = () => {\n  return(\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Stage />\n      </BrowserRouter>\n    </Provider>\n  )\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}